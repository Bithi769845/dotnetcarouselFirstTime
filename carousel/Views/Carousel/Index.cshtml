@model IEnumerable<carousel.Models.CarouselItem>

<style>
    .carousel-container {
        max-width: 100%;
        margin: 0 auto;
        padding: 50px 0;
    }

    .carousel div {
        padding: 20px;
        border-radius: 8px;
        text-align: center;
    }


    .carousel p {
        margin: 0;
        font-size: 1 rem;
    }

    .slick-prev, .slick-next {        
        box-shadow: 5px 5px 15px #D1D9E6, -5px -5px 15px #ffffff;
        border-radius: 20px;
        padding: 10px 30px 30px 10px;
        font-weight: bold;
        border: none;
        outline: none;
        z-index: 1;
    }

       
    .slick-slide {
        margin: 0 10px; /* Space between slides */
    }
</style>

<div class="carousel-container">
    <div class="carousel">
        @foreach (var item in Model)
        {
            <div style="background-image: linear-gradient(145deg, #e2e8ec, #ffffff); border-radius: 10px; box-shadow: 5px 5px 15px #D1D9E6, -5px -5px 15px #ffffff; padding: 20px; margin: 10px;">
                <p style="color:#ff014f;"><strong>Danger Zone:</strong> @item.DangerZoneName</p>
                <p style="color:#ff014f;"><strong>Number of People:</strong> @item.NumberOfPeople</p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize the carousel
            $('.carousel').slick({
                dots: false,
                infinite: false, // Disable infinite scrolling
                speed: 800,
                slidesToShow: 4,
                slidesToScroll: 1,
                autoplay: false, // Stop auto-slide
                prevArrow: '<button type="button" class="slick-prev">Previous</button>',
                nextArrow: '<button type="button" class="slick-next">Next</button>',
                responsive: [
                    {
                        breakpoint: 1024,
                        settings: {
                            slidesToShow: 3,
                        }
                    },
                    {
                        breakpoint: 768,
                        settings: {
                            slidesToShow: 2,
                        }
                    },
                    {
                        breakpoint: 480,
                        settings: {
                            slidesToShow: 1,
                        }
                    }
                ]
            });

            function updateButtonStates(slick) {
                const currentSlide = slick.slickCurrentSlide();
                const totalSlides = slick.slideCount;
                const slidesToShow = slick.options.slidesToShow;

                // Determine if there are previous or next slides available
                const hasPrevSlides = currentSlide > 0;
                const hasNextSlides = currentSlide < (totalSlides - slidesToShow);

                // Get the buttons
                const $prevButton = $('.slick-prev');
                const $nextButton = $('.slick-next');

                // Update button states automatically based on slides available
                $prevButton.prop('disabled', !hasPrevSlides).css('background-color', hasPrevSlides ? '#ff014f' : '#ccc');
                $nextButton.prop('disabled', !hasNextSlides).css('background-color', hasNextSlides ? '#ff014f' : '#ccc');
            }

            // Update button states on slide change and initialization
            $('.carousel').on('init', function (event, slick) {
                updateButtonStates(slick); // Set initial button states
            });

            $('.carousel').on('afterChange', function (event, slick, currentSlide) {
                updateButtonStates(slick); // Update states after slide change
            });

            // Initial button state setup after carousel is initialized
            updateButtonStates($('.carousel').slick('getSlick'));
        });
    </script>
}








